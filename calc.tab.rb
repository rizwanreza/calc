#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'calc.rex'

class Calculator < Racc::Parser

module_eval(<<'...end calc.y/module_eval...', 'calc.y', 18)

...end calc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     5,     6,     7,    10,     8,     9,     1,    11,    12,
    13 ]

racc_action_check = [
     1,     1,     1,     1,     5,     2,     4,     0,     6,     7,
     8 ]

racc_action_pointer = [
     5,    -3,     5,   nil,     4,     2,     6,     7,    10,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,    -3,    -8,    -1,    -8,    -8,    -8,    -8,    -8,    -4,
    -5,    -6,    -7,    14 ]

racc_goto_table = [
     2,     3 ]

racc_goto_check = [
     1,     2 ]

racc_goto_pointer = [
   nil,     0,     1 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_none,
  0, 8, :_reduce_2,
  1, 9, :_reduce_none,
  3, 9, :_reduce_4,
  3, 9, :_reduce_5,
  3, 9, :_reduce_6,
  3, 9, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 14

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :ADD => 3,
  :SUBTRACT => 4,
  :MULTIPLY => 5,
  :DIVIDE => 6 }

racc_nt_base = 7

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "ADD",
  "SUBTRACT",
  "MULTIPLY",
  "DIVIDE",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'calc.y', 4)
  def _reduce_2(val, _values)
     0 
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'calc.y', 7)
  def _reduce_4(val, _values)
     val[0] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 8)
  def _reduce_5(val, _values)
     val[0] - val[2] 
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 9)
  def _reduce_6(val, _values)
     val[0] * val[2] 
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 10)
  def _reduce_7(val, _values)
     val[0] / val[2] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Calculator

calc = Calculator.new
puts calc.scan_str('2+2')
puts calc.scan_str('2-2')
puts calc.scan_str('2*2')
puts calc.scan_str('2/2')
